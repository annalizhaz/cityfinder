if (length(cl <- class(x)) > 1)
oldClass(x) <- cl[-1L]
NextMethod("xtfrm")
}
<bytecode: 0x103356320>
<environment: namespace:base>
$xtfrm.Date
function (x)
as.numeric(x)
<bytecode: 0x103356a40>
<environment: namespace:base>
$xtfrm.default
function (x)
if (is.numeric(x)) unclass(x) else as.vector(rank(x, ties.method = "min",
na.last = "keep"))
<bytecode: 0x1033577b8>
<environment: namespace:base>
$xtfrm.difftime
function (x)
as.numeric(x)
<bytecode: 0x103357278>
<environment: namespace:base>
$xtfrm.factor
function (x)
as.integer(x)
<bytecode: 0x103357ff0>
<environment: namespace:base>
$xtfrm.numeric_version
function (x)
{
x <- .encode_numeric_version(x)
NextMethod("xtfrm")
}
<bytecode: 0x103357dc0>
<environment: namespace:base>
$xtfrm.POSIXct
function (x)
as.numeric(x)
<bytecode: 0x103358940>
<environment: namespace:base>
$xtfrm.POSIXlt
function (x)
as.double(x)
<bytecode: 0x103358710>
<environment: namespace:base>
$xtfrm.Surv
function (x)
order(if (ncol(x) == 2L) order(x[, 1L], x[, 2L]) else order(x[,
1L], x[, 2L], x[, 3L]))
<bytecode: 0x1033584e0>
<environment: namespace:base>
$xzfile
function (description, open = "", encoding = getOption("encoding"),
compression = 6)
.Internal(xzfile(description, open, encoding, compression))
<bytecode: 0x103359780>
<environment: namespace:base>
$zapsmall)
funs
formals(funs$zapsmall)
formals(funs$write)
length(formals(funs$write))
max(length(formals(funs$write)))
max(length(formals(funs)))
for (i in length(funs))
{}
for (i in length(funs))
{pprint()}
for (i in length(funs))
for (i in funs)
{print length(formals$i)}
length(funs$write)
length(formals(funs$write))
funs[]
i < funs[]
max[funs[formals(funs)]]
for (i in funs) {}
for (i in funs)
{print(formals(i))}
for (i in funs)
{print(max(formals(i))}
for (i in funs)
{print(max(formals(i))}
for (i in funs)
{print(max(formals(i)))}
for (i in funs)
{print(length(formals(i)))}
for (i in funs)
{print(max(length(formals(i))))}
for (i in funs)
{print(max(length(formals(i))))}
i <- list(1:10)
max(length(i))
max(i)
for (j in i)
{print(max(i))}
{print(length(i))}
i <- list(1:10, 10:20)
for (j in i)
{print(length(i))}
for (j in i)
{print(max(i))}
for (i in funs)
{print(max(length(formals(i))))}
for (i in funs)
{print i if length(formals$i == 0)
for (i in funs)
{print (i) if length(formals$i == 0)
for (i in funs)
{if length(formals$i == 0)}
{print(i)}
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
typeof(f())
typeof(c(1,2))
typeof(v <-c(1,2))
?rm()
exists(f)
exists(v)
?exists
c <- 10
c(c = c)
f <- function(x) {
f <- function(x) {
f <- function(x) {
x ^ 2
}
f(x) + 1
}
f(x) * 2
}
f(10)
x <-1
y <- 2
`-`(x,y)
for (i in 1:20) print(i)
x <- c(1:20)
sapply(x, function(x) x[2])
sapply(x, function(x) x +2)
add <- function(x) {
function(y) x + y
}
adders <- lapply(1:10, add)
adders
x = c(1:10, NA)
x
y <- runif(min = 0, max = 1, 20)
y
f1 <- function(x = {y <- 1; 2}, y = 0) {
x + y
}
f1()
f2 <- function(x = z) {
z <- 100
x
}
f2()
f <- function(x) x
f(1)
df <- data.frame(x = 1:5, y = 5:10)
df <- data.frame(x = 1:5, y = 6:10)
df
typeof(df)
install.packages('pryr')
library(pryr)
otype(df)
otype(df$x)
mean
ftype(mean)
methods('mean')
methods('max')
methods('t.test')
methods(class = 'Date')
foo <- function(x) {
if (!is.numeric(x)) stop("X must be numeric")
structure(list(x), class = "foo")
}
food
foo
mod <- lm(log(mpg) ~ log(disp), data = mtcars)
mod
?t()
?t.test()
t.test(extra ~ group, data = sleep)
View(mtcars)
t.test(mpg ~ wt, data = mtcars)
t.test(mpg ~ wt, hp, data = mtcars)
system.time()
?stop()
?try()
?browser()
print('a')
f <- function(a) {print(a)}
f(2)
f <- function(a) {if a < 2 {print(a)}}
f <- function(a) {if a < 2 {print(a)}
f <- function(a) {if a < 2 print(a)}
f <- function(a) {if (a < 2) print(a)}
f(2)
(1)
setwd('Users/dani/Dropbox')
pwd()
wd()
dir()
getwd()
setwd('../Dropbox')
setwd("/Users/dani/Dropbox")
df <- read.csv('stats-data.csv')
View(df)
df$age
mean(df$age)
table(df)
table(df$age)
?lm()
Attach(df)
Attach(df)
?attach()
attach(df)
model79 <-lm(re78 ~ treated)
model78 <-lm(re78 ~ treated)
summary(model78)
result78 <- summary(model78)
summary(model78)$r.squared
summary(model78)$coefficients
summary(model78)$coefficients$1
summary(model78)$coefficients[1]
summary(model78)$coefficients[2]
model78 <-lm(re78 ~ treated)
summary <- summary(model78)
summary
B1hat <- summary$coefficients[2]
B0hat <-summary$coefficients[1]
B1hat <- summary$coefficients[2]
B1hat
B0hat <-summary$coefficients[1]
B0hat
mean(df$re78)
mean_treated <- mean(df$re78[df$treated == 1 ])
mean_treated
mean_untreated <- mean(df$re78[df$treated == 0])
mean_untreated
B1hat == mean_treated - mean_untreated
B1hat
?round()
round(B1hat)
round(B1hat) == round(mean_treated - mean_untreated)
round(B0hat) == round(mean_untreated)
df[df$re78 > 0,]
nrow(df)
df[df$re78 > 6000,]
df[df$re78 > 60000,]
nrow(df[df$re78 > 0,])
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
print(c)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
df[df$re78 >0, ]
count(df[df$re78 >0, ])
length(df[df$re78 >0, ])
nrow(df[df$re78 >0, ])
nrow(df)
df$working78 <-df$re78[df$re78 <= 0] <- 0
df$working78 <- 0
df$working78[df$re78 > 0] <- 1
nrow(df$working78 ==0)
nrow(df$working78 == 0)
nrow(df[df$working78 ==0,]
ds
nrow(df[df$working78 ==0,])
nrow(df[df$working78 ==1,])
modelworking78 <-lm(working78 ~ treated)
summary <- summary(modelworking78)
summary
model78 <-lm(re78 ~ treated)
summary <- summary(model78)
summary
modelworking78 <-lm(working78 ~ treated)
modelworking78 <-lm(df$working78 ~ treated)
summary <- summary(modelworking78)
summary
B1hat <- summary$coefficients[2]
B1hat
B0hat <-summary$coefficients[1]
B0hat
mean_treated <- mean(df$working78[df$treated == 1])
mean_treated
mean_untreated <- mean(df$working78[df$treated == 0])
mean_untreated
round(B1hat) == round(mean_treated - mean_untreated)
round(B0hat) == round(mean_untreated)
nrows(df[df$hisp ==0,])
nrows(df[df$hisp ==0,])
nrow(df[df$hisp ==0,])
nrow(df[df$hisp ==1,])
df_nonH <- df[df$hisp ==0,]
nrow(df_nonH)
model78 <-lm(df_nonH$re78 ~ df_nonH$treated)
summary <- summary(model78)
summary
B1hat <- summary$coefficients[2]
B1hat
B0hat <-summary$coefficients[1]
B0hat
mean_treated <- mean(df_nonH$re78[df_nonH$treated == 1])
mean_treated
mean_untreated <- mean(df_nonH$re78[df_nonH$treated == 0])
mean_untreated
round(B1hat) == round(mean_treated - mean_untreated)
round(B0hat) == round(mean_untreated)
View(df_nonH)
View(df_nonH)
modelworking78 <-lm(df_nonH$working78 ~ df_nonH$treated)
summary <- summary(modelworking78)
summary
B1hat <- summary$coefficients[2]
B1hat
B0hat <-summary$coefficients[1]
B0hat
mean_treated <- mean(df_nonH$working78[df_nonH$treated == 1])
mean_treated
mean_untreated <- mean(df_nonH$working78[df_nonH$treated == 0])
mean_untreated
round(B1hat) == round(mean_treated - mean_untreated)
round(B0hat) == round(mean_untreated)
library(splitstackshape)
library(sqldf)
wd <- "/Users/Dani/Dropbox/city-data"
setwd(wd)
file_list <-list.files()
for (file in file_list){
filepath <- file.path(wd ,paste(file,sep=""))
name <- substr(file, 1, 4)
data.frame(assign(name, read.csv(filepath, sep = ",")))
}
library(splitstackshape)
library(sqldf)
wd <- "/Users/Dani/Dropbox/city-data"
setwd(wd)
file_list <-list.files()
for (file in file_list){
filepath <- file.path(wd ,paste(file,sep=""))
name <- substr(file, 1, 4)
data.frame(assign(name, read.csv(filepath, sep = ",")))
}
View(crim)
inner_join <- sqldf("SELECT *
FROM walk
INNER JOIN Medi
ON lower(walk.City) = lower(Medi.City)
LIKE  '%' + walk.City + '%'
")
library(splitstackshape)
library(sqldf)
wd <- "/Users/Dani/Dropbox/city-data"
setwd(wd)
file_list <-list.files()
for (file in file_list){
filepath <- file.path(wd ,paste(file,sep=""))
name <- substr(file, 1, 4)
as.data.frame(apply(df,2,function(x)gsub('\\s+', '',x)))
data.frame(assign(name, read.csv(filepath, sep = ",")))
}
library(splitstackshape)
library(sqldf)
wd <- "/Users/Dani/Dropbox/city-data"
setwd(wd)
file_list <-list.files()
for (file in file_list){
filepath <- file.path(wd ,paste(file,sep=""))
name <- substr(file, 1, 4)
data.frame(assign(name, read.csv(filepath, sep = ",")))
}
inner_join <- sqldf("SELECT *
FROM walk
INNER JOIN Medi
ON lower(walk.City) = lower(Medi.City)
LIKE walk.City
")
inner_join <- sqldf("SELECT *
FROM walk
")
inner_join <- sqldf("SELECT *
FROM walk
INNER JOIN Medi
ON lower(walk.City) = lower(Medi.City)
")
View(inner_join)
inner_join <- sqldf("SELECT *
FROM walk
OUTER JOIN Medi
ON lower(walk.City) = lower(Medi.City)
")
inner_join <- sqldf("SELECT *
FROM walk
JOIN Medi
ON lower(walk.City) = lower(Medi.City)
")
inner_join <- sqldf("SELECT *
FROM walk
JOIN Medi
JOIN COLi
ON lower(walk.City) = lower(COLi.City)
JOIN crim
ON lower(walk.City) = lower(crim.City)
ON lower(walk.City) = lower(Medi.City)
")
inner_join <- sqldf("SELECT *
FROM walk
JOIN Medi
JOIN COLi
ON lower(walk.City) = lower(COLi.City)
ON lower(walk.City) = lower(Medi.City)
")
inner_join <- sqldf("SELECT *
FROM walk
JOIN Medi
JOIN COLi
ON lower(walk.City) == lower(COLi.City)
ON lower(walk.City) == lower(Medi.City)
")
inner_join <- sqldf("SELECT *
FROM walk
JOIN Medi
ON lower(walk.City) == lower(Medi.City)
")
merge(walk, Medi, by='City')
m <- merge(walk, Medi, by='City')
View(m)
m <- merge(walk, Medi, COLi, by='City')
n <-merge(m, COLi, by='City')
View(n)
?merge
m <- merge(walk, Medi, by='City', all=TRUE)
View(m)
m <- merge(walk, Medi, by='City', all.walk=TRUE)
m <- merge(walk, Medi, by='City', all=TRUE)
View(m)
n <-merge(m, COLi, by='City', all=TRUE)
View(n)
p <-merge(n, weat, by='City', all=TRUE)
View(p)
q <-merge(p, crim, by='City', all=TRUE)
View(q)
q[!(is.na(q$Walk.Score) | q$Walk.Score==""), ]
final<- q[!(is.na(q$Walk.Score) | q$Walk.Score==""), ]
View(final)
View(walk)
walk$Walk.Score == final$Walk.Score
View(walk)
final$Walk.Score
final[final$City, final$Walk.Score, ]
final[final$City, final$Walk.Score, ]
final[final$Walk.Score,]
final <- subset(final,duplicated('City'), fromLast=TRUE))
final <- subset(final,duplicated('City'), fromLast=TRUE)
final <- subset(final,duplicated(City) | duplicated(City, fromLast=TRUE))
m <- merge(walk, Medi, by='City', all=TRUE)
n <-merge(m, COLi, by='City', all=TRUE)
p <-merge(n, weat, by='City', all=TRUE)
q <-merge(p, crim, by='City', all=TRUE)
final<- q[!(is.na(q$Walk.Score) | q$Walk.Score==""), ]
final1 <- subset(final,duplicated(City) | duplicated(City, fromLast=TRUE))
View(final1)
final(duplicated(final), )
unique(final)
unique(final#City)
unique(final$City)
final %>% distinct('City')
final_unique <- sqldf("SELECT DISTINCT *
FROM final
")
